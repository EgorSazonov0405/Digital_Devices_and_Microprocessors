1. Код трехвходового дешифратора (System Verilog)
systemverilog
module lab21 (
    input logic [2:0] din,
    output logic [7:0] dout
);

always_comb begin
    case (din)
        3'b000: dout = 8'b00000001;
        3'b001: dout = 8'b00000010;
        3'b010: dout = 8'b00000100;
        3'b011: dout = 8'b00001000;
        3'b100: dout = 8'b00010000;
        3'b101: dout = 8'b00100000;
        3'b110: dout = 8'b01000000;
        3'b111: dout = 8'b10000000;
        default: dout = 8'b00000000;
    endcase
end

endmodule

Файл ограничений (XDC) для платы Basys 3
tcl
# Clock (100 MHz)
set_property PACKAGE_PIN W5 [get_ports clk]
set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]

# Входы (слайдеры SW0-SW2)
set_property PACKAGE_PIN V17 [get_ports {din[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[0]}]

set_property PACKAGE_PIN V16 [get_ports {din[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[1]}]

set_property PACKAGE_PIN W16 [get_ports {din[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[2]}]

# Выходы (светодиоды LD0-LD7)
set_property PACKAGE_PIN U16 [get_ports {dout[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[0]}]

set_property PACKAGE_PIN E19 [get_ports {dout[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[1]}]

set_property PACKAGE_PIN U19 [get_ports {dout[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[2]}]

set_property PACKAGE_PIN V19 [get_ports {dout[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[3]}]

set_property PACKAGE_PIN W18 [get_ports {dout[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[4]}]

set_property PACKAGE_PIN U15 [get_ports {dout[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[5]}]

set_property PACKAGE_PIN U14 [get_ports {dout[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[6]}]

set_property PACKAGE_PIN V14 [get_ports {dout[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[7]}]

# Кнопка сброса (BTNC)
set_property PACKAGE_PIN U18 [get_ports rst]
set_property IOSTANDARD LVCMOS33 [get_ports rst]

Альтернативная реализация с использованием оператора сдвига
systemverilog
module lab21 (
    input logic [2:0] din,
    output logic [7:0] dout
);

assign dout = 1 << din;

endmodule

Версия с тактированием и сбросом
systemverilog
module lab21 (
    input logic clk,
    input logic rst,
    input logic [2:0] din,
    output logic [7:0] dout
);

always_ff @(posedge clk or posedge rst) begin
    if (rst) begin
        dout <= 8'b00000000;
    end else begin
        case (din)
            3'b000: dout <= 8'b00000001;
            3'b001: dout <= 8'b00000010;
            3'b010: dout <= 8'b00000100;
            3'b011: dout <= 8'b00001000;
            3'b100: dout <= 8'b00010000;
            3'b101: dout <= 8'b00100000;
            3'b110: dout <= 8'b01000000;
            3'b111: dout <= 8'b10000000;
            default: dout <= 8'b00000000;
        endcase
    end
end

endmodule

Как использовать:
Создайте проект в Vivado и добавьте файл с кодом System Verilog

Добавьте файл ограничений (.xdc) с привязкой ножек

Синтезируйте проект и сгенерируйте битстрим

Запрограммируйте ПЛИС через JTAG

Принцип работы:
Входы: слайдеры SW0-SW2 формируют 3-битный адрес

Выходы: светодиоды LD0-LD7 показывают результат дешифрации

Например: SW=000 → LD0 горит, остальные выключены

SW=111 → LD7 горит, остальные выключены

Дешифратор преобразует 3-битный двоичный код в 8-битный "one-hot" код, где только один бит активен в каждый момент времени.


2. Код восьмивходового шифратора (System Verilog)
systemverilog
module lab22 (
    input logic [7:0] din,
    output logic [3:0] dout
);

always_comb begin
    // Проверка на некорректные данные (более одного активного входа)
    if (din == 8'b00000000 || ($countones(din) > 1)) begin
        dout = 4'b1000; // Некорректная комбинация
    end else begin
        // Приоритетный шифратор (старший бит имеет приоритет)
        case (1'b1)
            din[7]: dout = 4'b0111; // 7
            din[6]: dout = 4'b0110; // 6
            din[5]: dout = 4'b0101; // 5
            din[4]: dout = 4'b0100; // 4
            din[3]: dout = 4'b0011; // 3
            din[2]: dout = 4'b0010; // 2
            din[1]: dout = 4'b0001; // 1
            din[0]: dout = 4'b0000; // 0
            default: dout = 4'b1000; // Запасной вариант
        endcase
    end
end

endmodule

Альтернативная реализация с использованием функций
systemverilog
module lab22 (
    input logic [7:0] din,
    output logic [3:0] dout
);

function automatic logic [3:0] encoder;
    input logic [7:0] data;
    begin
        if (data == 8'b00000000 || ($countones(data) > 1)) begin
            encoder = 4'b1000; // Некорректная комбинация
        end else begin
            case (1'b1)
                data[7]: encoder = 4'b0111;
                data[6]: encoder = 4'b0110;
                data[5]: encoder = 4'b0101;
                data[4]: encoder = 4'b0100;
                data[3]: encoder = 4'b0011;
                data[2]: encoder = 4'b0010;
                data[1]: encoder = 4'b0001;
                data[0]: encoder = 4'b0000;
                default: encoder = 4'b1000;
            endcase
        end
    end
endfunction

assign dout = encoder(din);

endmodule

Файл ограничений (XDC) для Basys 3
tcl
# Входы (слайдеры SW0-SW7)
set_property PACKAGE_PIN V17 [get_ports {din[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[0]}]

set_property PACKAGE_PIN V16 [get_ports {din[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[1]}]

set_property PACKAGE_PIN W16 [get_ports {din[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[2]}]

set_property PACKAGE_PIN W17 [get_ports {din[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[3]}]

set_property PACKAGE_PIN W15 [get_ports {din[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[4]}]

set_property PACKAGE_PIN V15 [get_ports {din[5]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[5]}]

set_property PACKAGE_PIN W14 [get_ports {din[6]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[6]}]

set_property PACKAGE_PIN W13 [get_ports {din[7]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[7]}]

# Выходы (светодиоды LD0-LD3)
set_property PACKAGE_PIN U16 [get_ports {dout[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[0]}]

set_property PACKAGE_PIN E19 [get_ports {dout[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[1]}]

set_property PACKAGE_PIN U19 [get_ports {dout[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[2]}]

set_property PACKAGE_PIN V19 [get_ports {dout[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[3]}]

# Кнопка сброса (BTNC)
set_property PACKAGE_PIN U18 [get_ports rst]
set_property IOSTANDARD LVCMOS33 [get_ports rst]

# Тактовая частота (100 MHz)
set_property PACKAGE_PIN W5 [get_ports clk]
set_property IOSTANDARD LVCMOS33 [get_ports clk]
create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]

Тестовые примеры работы:
Вход (din)	Выход (dout)	Описание
00000001	0000	Корректно: бит 0 активен
00000010	0001	Корректно: бит 1 активен
00000100	0010	Корректно: бит 2 активен
10000000	0111	Корректно: бит 7 активен
00000000	1000	Некорректно: нет активных битов
00000011	1000	Некорректно: два активных бита
00110000	1000	Некорректно: два активных бита
Принцип работы:
Корректные данные: только один слайдер активен (включен), dout[2:0] показывает номер активного входа, dout[3] = 0

Некорректные данные: нет активных входов или более одного активного входа, dout = 4'b1000

Приоритет: если случайно активировано несколько входов, выбирается старший активный бит

Шифратор преобразует "one-hot" код (где активен только один бит) в двоичный код номера активного входа.


3. Код преобразователя (System Verilog)
systemverilog
module lab23 (
    input logic [3:0] din,
    output logic [3:0] dout
);

// Преобразование двоичного кода в код Грея
// Старший бит сохраняется, остальные: G[i] = B[i] XOR B[i+1]
assign dout[3] = din[3];
assign dout[2] = din[3] ^ din[2];
assign dout[1] = din[2] ^ din[1];
assign dout[0] = din[1] ^ din[0];

endmodule

Альтернативная реализация с использованием оператора конкатенации
systemverilog
module lab23 (
    input logic [3:0] din,
    output logic [3:0] dout
);

// Компактная запись преобразования
assign dout = {din[3], din[3] ^ din[2], din[2] ^ din[1], din[1] ^ din[0]};

endmodule
Реализация с использованием always_comb
systemverilog
module lab23 (
    input logic [3:0] din,
    output logic [3:0] dout
);

always_comb begin
    dout[3] = din[3];
    dout[2] = din[3] ^ din[2];
    dout[1] = din[2] ^ din[1];
    dout[0] = din[1] ^ din[0];
end

endmodule

Файл ограничений (XDC) для Basys 3
tcl
# Входы (слайдеры SW0-SW3)
set_property PACKAGE_PIN V17 [get_ports {din[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[0]}]

set_property PACKAGE_PIN V16 [get_ports {din[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[1]}]

set_property PACKAGE_PIN W16 [get_ports {din[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[2]}]

set_property PACKAGE_PIN W17 [get_ports {din[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[3]}]

# Выходы (светодиоды LD0-LD3)
set_property PACKAGE_PIN U16 [get_ports {dout[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[0]}]

set_property PACKAGE_PIN E19 [get_ports {dout[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[1]}]

set_property PACKAGE_PIN U19 [get_ports {dout[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[2]}]

set_property PACKAGE_PIN V19 [get_ports {dout[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {dout[3]}]

Таблица преобразования для проверки:
Двоичный код (din)	Код Грея (dout)
0000 (0)	0000 (0)
0001 (1)	0001 (1)
0010 (2)	0011 (3)
0011 (3)	0010 (2)
0100 (4)	0110 (6)
0101 (5)	0111 (7)
0110 (6)	0101 (5)
0111 (7)	0100 (4)
1000 (8)	1100 (12)
1001 (9)	1101 (13)
1010 (10)	1111 (15)
1011 (11)	1110 (14)
1100 (12)	1010 (10)
1101 (13)	1011 (11)
1110 (14)	1001 (9)
1111 (15)	1000 (8)
Принцип работы:
Старший бит (dout[3]) сохраняется без изменений

Каждый следующий бит получается как XOR текущего и старшего соседнего бита двоичного кода

Код Грея обеспечивает, что соседние значения отличаются только в одном бите

Преобразование обратимо: можно преобразовать обратно из кода Грея в двоичный

Преобразователь позволяет наблюдать свойства кода Грея: при последовательном изменении входного двоичного кода выходной код будет меняться плавно, с изменением только одного бита за раз.


4. Код преобразователя (System Verilog)
systemverilog
module lab24 (
    input logic [3:0] din,
    output logic [6:0] dout,
    output logic [3:0] an
);

// Управление анодами: активируем только правый индикатор
assign an = 4'b1110;

// Преобразование двоичного кода в семисегментный код
// Сегменты: a, b, c, d, e, f, g (MSB to LSB)
always_comb begin
    case (din)
        4'b0000: dout = ~7'b0111111; // 0
        4'b0001: dout = ~7'b0000110; // 1
        4'b0010: dout = ~7'b1011011; // 2
        4'b0011: dout = ~7'b1001111; // 3
        4'b0100: dout = ~7'b1100110; // 4
        4'b0101: dout = ~7'b1101101; // 5
        4'b0110: dout = ~7'b1111101; // 6
        4'b0111: dout = ~7'b0000111; // 7
        4'b1000: dout = ~7'b1111111; // 8
        4'b1001: dout = ~7'b1101111; // 9
        4'b1010: dout = ~7'b1110111; // A
        4'b1011: dout = ~7'b1111100; // b
        4'b1100: dout = ~7'b0111001; // C
        4'b1101: dout = ~7'b1011110; // d
        4'b1110: dout = ~7'b1111001; // E
        4'b1111: dout = ~7'b1110001; // F
        default: dout = ~7'b0000000; // Все сегменты выключены
    endcase
end

endmodule

Альтернативная реализация с assign
systemverilog
module lab24 (
    input logic [3:0] din,
    output logic [6:0] dout,
    output logic [3:0] an
);

assign an = 4'b1110;

assign dout = (din == 4'b0000) ? ~7'b0111111 : // 0
              (din == 4'b0001) ? ~7'b0000110 : // 1
              (din == 4'b0010) ? ~7'b1011011 : // 2
              (din == 4'b0011) ? ~7'b1001111 : // 3
              (din == 4'b0100) ? ~7'b1100110 : // 4
              (din == 4'b0101) ? ~7'b1101101 : // 5
              (din == 4'b0110) ? ~7'b1111101 : // 6
              (din == 4'b0111) ? ~7'b0000111 : // 7
              (din == 4'b1000) ? ~7'b1111111 : // 8
              (din == 4'b1001) ? ~7'b1101111 : // 9
              (din == 4'b1010) ? ~7'b1110111 : // A
              (din == 4'b1011) ? ~7'b1111100 : // b
              (din == 4'b1100) ? ~7'b0111001 : // C
              (din == 4'b1101) ? ~7'b1011110 : // d
              (din == 4'b1110) ? ~7'b1111001 : // E
              (din == 4'b1111) ? ~7'b1110001 : // F
                                 ~7'b0000000;  // По умолчанию

endmodule

Файл ограничений (XDC) для Basys 3
tcl
# Входы (слайдеры SW0-SW3)
set_property PACKAGE_PIN V17 [get_ports {din[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[0]}]

set_property PACKAGE_PIN V16 [get_ports {din[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[1]}]

set_property PACKAGE_PIN W16 [get_ports {din[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[2]}]

set_property PACKAGE_PIN W17 [get_ports {din[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[3]}]

# Выходы: сегменты семисегментного индикатора (CA, CB, CC, CD, CE, CF, CG)
set_property PACKAGE_PIN W7 [get_ports {dout[0]}]  // CA
set_property IOSTANDARD LVCMOS33 [get_ports {dout[0]}]

set_property PACKAGE_PIN W6 [get_ports {dout[1]}]  // CB
set_property IOSTANDARD LVCMOS33 [get_ports {dout[1]}]

set_property PACKAGE_PIN U8 [get_ports {dout[2]}]  // CC
set_property IOSTANDARD LVCMOS33 [get_ports {dout[2]}]

set_property PACKAGE_PIN V8 [get_ports {dout[3]}]  // CD
set_property IOSTANDARD LVCMOS33 [get_ports {dout[3]}]

set_property PACKAGE_PIN U5 [get_ports {dout[4]}]  // CE
set_property IOSTANDARD LVCMOS33 [get_ports {dout[4]}]

set_property PACKAGE_PIN V5 [get_ports {dout[5]}]  // CF
set_property IOSTANDARD LVCMOS33 [get_ports {dout[5]}]

set_property PACKAGE_PIN U7 [get_ports {dout[6]}]  // CG
set_property IOSTANDARD LVCMOS33 [get_ports {dout[6]}]

# Выходы: аноды семисегментных индикаторов (AN0, AN1, AN2, AN3)
set_property PACKAGE_PIN U2 [get_ports {an[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}]

set_property PACKAGE_PIN U4 [get_ports {an[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}]

set_property PACKAGE_PIN V4 [get_ports {an[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}]

set_property PACKAGE_PIN W4 [get_ports {an[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}]

Таблица сегментов для справки:
text
   a
  ---
f|   |b
  -g-
e|   |c
  ---
   d
Принцип работы:
Вход: 4-битный двоичный код (0-15) через слайдеры SW0-SW3

Выход dout: 7-битный код для управления сегментами (активный низкий)

Выход an: 4-битный код для выбора индикатора (активный низкий)

Правый индикатор: an = 4'b1110 (AN0 активен)

Инверсия сигналов: из-за инвертирующих буферов на плате используется инвертированный код

Преобразователь отображает шестнадцатеричные цифры 0-F на правом семисегментном индикаторе.


5. Код функции log2(x) (System Verilog)
systemverilog
module lab25 (
    input logic [4:0] din,
    output logic [6:0] dout,
    output logic [3:0] an
);

logic [2:0] log_result;
logic [4:0] priority_encoder;

// Приоритетный шифратор для нахождения старшего установленного бита
always_comb begin
    priority_encoder = 5'b00000;
    if (din[4]) priority_encoder = 5'b10100; // log2(16-31) = 4
    else if (din[3]) priority_encoder = 5'b10011; // log2(8-15) = 3
    else if (din[2]) priority_encoder = 5'b10010; // log2(4-7) = 2
    else if (din[1]) priority_encoder = 5'b10001; // log2(2-3) = 1
    else if (din[0]) priority_encoder = 5'b10000; // log2(1) = 0
    else priority_encoder = 5'b11111; // Ошибка: x=0
end

// Извлекаем результат log2 (3 бита)
assign log_result = (priority_encoder[4]) ? priority_encoder[2:0] : 3'b111;

// Управление анодами: активируем только правый индикатор
assign an = 4'b1110;

// Преобразование результата в семисегментный код
always_comb begin
    case (log_result)
        3'b000: dout = ~7'b0111111; // 0
        3'b001: dout = ~7'b0000110; // 1
        3'b010: dout = ~7'b1011011; // 2
        3'b011: dout = ~7'b1001111; // 3
        3'b100: dout = ~7'b1100110; // 4
        default: dout = ~7'b0000000; // Ошибка или неопределено
    endcase
end

endmodule

Оптимизированная версия
systemverilog
module lab25 (
    input logic [4:0] din,
    output logic [6:0] dout,
    output logic [3:0] an
);

logic [2:0] log_value;

// Приоритетный кодер для вычисления log2(x)
always_comb begin
    casex (din)
        5'b1xxxx: log_value = 3'b100; // 16-31 -> log2=4
        5'b01xxx: log_value = 3'b011; // 8-15 -> log2=3
        5'b001xx: log_value = 3'b010; // 4-7 -> log2=2
        5'b0001x: log_value = 3'b001; // 2-3 -> log2=1
        5'b00001: log_value = 3'b000; // 1 -> log2=0
        default:  log_value = 3'b111; // 0 -> ошибка
    endcase
end

// Управление анодами
assign an = 4'b1110;

// Семисегментный декодер
always_comb begin
    case (log_value)
        3'b000: dout = ~7'b0111111; // 0
        3'b001: dout = ~7'b0000110; // 1
        3'b010: dout = ~7'b1011011; // 2
        3'b011: dout = ~7'b1001111; // 3
        3'b100: dout = ~7'b1100110; // 4
        default: dout = ~7'b0000000; // Пусто (ошибка)
    endcase
end

endmodule

Файл ограничений (XDC) для Basys 3
tcl
# Входы (слайдеры SW0-SW4)
set_property PACKAGE_PIN V17 [get_ports {din[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[0]}]

set_property PACKAGE_PIN V16 [get_ports {din[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[1]}]

set_property PACKAGE_PIN W16 [get_ports {din[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[2]}]

set_property PACKAGE_PIN W17 [get_ports {din[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[3]}]

set_property PACKAGE_PIN W15 [get_ports {din[4]}]
set_property IOSTANDARD LVCMOS33 [get_ports {din[4]}]

# Выходы: сегменты семисегментного индикатора
set_property PACKAGE_PIN W7 [get_ports {dout[0]}]  // CA
set_property IOSTANDARD LVCMOS33 [get_ports {dout[0]}]

set_property PACKAGE_PIN W6 [get_ports {dout[1]}]  // CB
set_property IOSTANDARD LVCMOS33 [get_ports {dout[1]}]

set_property PACKAGE_PIN U8 [get_ports {dout[2]}]  // CC
set_property IOSTANDARD LVCMOS33 [get_ports {dout[2]}]

set_property PACKAGE_PIN V8 [get_ports {dout[3]}]  // CD
set_property IOSTANDARD LVCMOS33 [get_ports {dout[3]}]

set_property PACKAGE_PIN U5 [get_ports {dout[4]}]  // CE
set_property IOSTANDARD LVCMOS33 [get_ports {dout[4]}]

set_property PACKAGE_PIN V5 [get_ports {dout[5]}]  // CF
set_property IOSTANDARD LVCMOS33 [get_ports {dout[5]}]

set_property PACKAGE_PIN U7 [get_ports {dout[6]}]  // CG
set_property IOSTANDARD LVCMOS33 [get_ports {dout[6]}]

# Выходы: аноды семисегментных индикаторов
set_property PACKAGE_PIN U2 [get_ports {an[0]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}]

set_property PACKAGE_PIN U4 [get_ports {an[1]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}]

set_property PACKAGE_PIN V4 [get_ports {an[2]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}]

set_property PACKAGE_PIN W4 [get_ports {an[3]}]
set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}]

Таблица значений функции log2(x):
Вход (x)	Диапазон	log2(x)	Отображение
00000 (0)	0	ошибка	пусто
00001 (1)	1	0	0
0001x (2-3)	2-3	1	1
001xx (4-7)	4-7	2	2
01xxx (8-15)	8-15	3	3
1xxxx (16-31)	16-31	4	4
Принцип работы:
Вход: 5-битное число (0-31) через слайдеры SW0-SW4

Приоритетный шифратор: находит старший установленный бит

Вычисление log2(x): позиция старшего бита = ⌊log₂(x)⌋

Особый случай: x=0 → ошибка (пустой индикатор)

Отображение: результат выводится на правый семисегментный индикатор

Функция вычисляет целую часть логарифма по основанию 2, что эквивалентно нахождению позиции старшего установленного бита в числе.